import{S as me,i as he,s as ye,k as l,q as e,a as r,l as c,m as i,r as o,h as n,c as u,n as k,b as p,H as a,C as $a}from"./index-e94212ef.js";function we(Nt){let d,_n,ds,Tn,Bn,fs,Hn,xn,ms,Pn,Sn,hs,An,zn,Is,V,Dn,Ms,j,On,Ws,N,In,Ls,H,Gt=`<code class="language-swift"><span class="token keyword">protocol</span> <span class="token class-name">BaseType</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">func</span> <span class="token function-definition function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">extension</span> <span class="token class-name">BaseType</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">func</span> <span class="token function-definition function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"BaseType"</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">BaseClass</span><span class="token punctuation">:</span> <span class="token class-name">BaseType</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">CustomizedClass</span><span class="token punctuation">:</span> <span class="token class-name">BaseClass</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">func</span> <span class="token function-definition function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"CustomizedClass"</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> base<span class="token punctuation">:</span> <span class="token class-name">BaseType</span> <span class="token operator">=</span> <span class="token class-name">CustomizedClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
base<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>`,Rs,g,Mn,ys,Wn,Ln,Fs,x,Xt='<code class="language-undefined">&quot;BaseType&quot;</code>',qs,G,Rn,Ys,X,Fn,Us,Z,qn,Vs,P,Zt=`<code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">Service</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> errorHandler<span class="token punctuation">:</span> <span class="token class-name">CanHandleError</span>
<span class="token punctuation">&#125;</span></code>`,js,w,Yn,ws,Un,Vn,vs,jn,Nn,Ns,S,Jt=`<code class="language-swift"><span class="token keyword">protocol</span> <span class="token class-name">CanHandleError</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">func</span> <span class="token function-definition function">handle</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> error<span class="token punctuation">:</span> <span class="token class-name">Error</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">extension</span> <span class="token class-name">CanHandleError</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">func</span> <span class="token function-definition function">handle</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> error<span class="token punctuation">:</span> <span class="token class-name">Error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Error: </span><span class="token interpolation-punctuation punctuation">(</span><span class="token interpolation">error</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Gs,v,Gn,Es,Xn,Zn,bs,Jn,Kn,Xs,_,Qn,Cs,$n,sa,Zs,A,Kt=`<code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">DefaultApplicationEngine</span><span class="token punctuation">:</span> <span class="token class-name">CanHandleError</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Some more open functions</span>
<span class="token punctuation">&#125;</span></code>`,Js,E,na,gs,aa,ta,_s,ea,oa,Ks,z,Qt=`<code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">CustomizedApplicationEngine</span><span class="token punctuation">:</span> <span class="token class-name">DefaultApplicationEngine</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">func</span> <span class="token function-definition function">handle</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> error<span class="token punctuation">:</span> <span class="token class-name">Error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Customized Error: </span><span class="token interpolation-punctuation punctuation">(</span><span class="token interpolation">error</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">Service</span><span class="token punctuation">(</span>errorHandler<span class="token punctuation">:</span> <span class="token class-name">CustomizedApplicationEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span>errorHandler
    <span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">ApplicationError</span><span class="token punctuation">.</span>wrongConfiguration<span class="token punctuation">)</span> <span class="token comment">// Outputs "Error: ApplicationError.wrongConfiguration"</span></code>`,Qs,J,pa,$s,K,la,sn,Q,ca,nn,D,$t=`<code class="language-swift"><span class="token keyword">protocol</span> <span class="token class-name">BaseType</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">func</span> <span class="token function-definition function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">extension</span> <span class="token class-name">BaseType</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">func</span> <span class="token function-definition function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"BaseType"</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">BaseClass</span><span class="token punctuation">:</span> <span class="token class-name">BaseType</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">CustomizedClass</span><span class="token punctuation">:</span> <span class="token class-name">BaseClass</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">func</span> <span class="token function-definition function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"CustomizedClass"</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> base<span class="token punctuation">:</span> <span class="token class-name">BaseType</span> <span class="token operator">=</span> <span class="token class-name">CustomizedClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
base<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>`,an,m,ia,Ts,ra,ua,Bs,ka,da,Hs,fa,ma,tn,y,ha,O,ya,I,wa,va,M,Ea,ba,en,$,Ca,on,ss,ga,pn,h,_a,xs,Ta,Ba,Ps,Ha,xa,Ss,Pa,Sa,ln,W,se=`<code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">BaseClass</span><span class="token punctuation">:</span> <span class="token class-name">BaseType</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">func</span> <span class="token function-definition function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"BaseClass"</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">CustomizedClass</span><span class="token punctuation">:</span> <span class="token class-name">BaseClass</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"CustomizedClass"</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> base<span class="token punctuation">:</span> <span class="token class-name">BaseType</span> <span class="token operator">=</span> <span class="token class-name">CustomizedClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
base<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Outputs "CustomizedClass"</span></code>`,cn,ns,Aa,rn,L,ne=`<code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">CustomizedClass</span><span class="token punctuation">:</span> <span class="token class-name">BaseClass</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// does not override doSomething</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">AnotherClass</span><span class="token punctuation">:</span> <span class="token class-name">CustomizedClass</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"AnotherClass"</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> base<span class="token punctuation">:</span> <span class="token class-name">BaseType</span> <span class="token operator">=</span> <span class="token class-name">AnotherClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
base<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Outputs "AnotherClass"</span></code>`,un,as,za,kn,ts,Da,dn,b,Oa,R,Ia,Ma,F,Wa,La,fn,es,Ra,mn,q,ae=`<code class="language-swift"><span class="token comment">// Define the protocol with default implementation</span>
<span class="token keyword">protocol</span> <span class="token class-name">BaseType</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> behavior<span class="token punctuation">:</span> <span class="token class-name">Behavior</span> <span class="token punctuation">&#123;</span> <span class="token keyword">get</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">extension</span> <span class="token class-name">BaseType</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">func</span> <span class="token function-definition function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        behavior<span class="token punctuation">.</span><span class="token function">onAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Struct for holding the behavior</span>
<span class="token keyword">struct</span> <span class="token class-name">Behavior</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> onAction<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">extension</span> <span class="token class-name">Behavior</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token keyword">let</span> &#96;<span class="token keyword">default</span>&#96; <span class="token operator">=</span> <span class="token class-name">Behavior</span> <span class="token punctuation">&#123;</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"BaseType"</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Class conforming to BaseType and using composition for behavior</span>
<span class="token keyword">class</span> <span class="token class-name">BaseClass</span><span class="token punctuation">:</span> <span class="token class-name">BaseType</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> behavior<span class="token punctuation">:</span> <span class="token class-name">Behavior</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token keyword">default</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">CustomizedClass</span><span class="token punctuation">:</span> <span class="token class-name">BaseClass</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">override</span> <span class="token keyword">var</span> behavior<span class="token punctuation">:</span> <span class="token class-name">Behavior</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Behavior</span> <span class="token punctuation">&#123;</span>
            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"CustomizedClass"</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Usage</span>
<span class="token keyword">let</span> base<span class="token punctuation">:</span> <span class="token class-name">BaseType</span> <span class="token operator">=</span> <span class="token class-name">BaseClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
base<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Outputs "BaseType"</span>

<span class="token keyword">let</span> customized<span class="token punctuation">:</span> <span class="token class-name">BaseType</span> <span class="token operator">=</span> <span class="token class-name">CustomizedClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
customized<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Outputs "CustomizedClass"</span></code>`,hn,f,Fa,As,qa,Ya,zs,Ua,Va,Ds,ja,Na,Os,Ga,Xa,yn,os,Za,wn,ps,Ja,vn,Y,te=`<code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ErrorHandling</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> onError<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">Error</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">extension</span> <span class="token class-name">ErrorHandling</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token keyword">let</span> &#96;<span class="token keyword">default</span>&#96; <span class="token operator">=</span> <span class="token class-name">ErrorHandling</span> <span class="token punctuation">&#123;</span> error <span class="token keyword">in</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Error: </span><span class="token interpolation-punctuation punctuation">(</span><span class="token interpolation">error</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">protocol</span> <span class="token class-name">CanHandleError</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> errorHandling<span class="token punctuation">:</span> <span class="token class-name">ErrorHandling</span> <span class="token punctuation">&#123;</span> <span class="token keyword">get</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">extension</span> <span class="token class-name">CanHandleError</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">func</span> <span class="token function-definition function">handle</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> error<span class="token punctuation">:</span> <span class="token class-name">Error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        errorHandling<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">DefaultApplicationEngine</span><span class="token punctuation">:</span> <span class="token class-name">CanHandleError</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> errorHandling<span class="token punctuation">:</span> <span class="token class-name">ErrorHandling</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token keyword">default</span> <span class="token punctuation">&#125;</span>
    <span class="token comment">// Some more open functions</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">CustomizedApplicationEngine</span><span class="token punctuation">:</span> <span class="token class-name">DefaultApplicationEngine</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">override</span> <span class="token keyword">var</span> errorHandling<span class="token punctuation">:</span> <span class="token class-name">ErrorHandling</span> <span class="token punctuation">&#123;</span>
        <span class="token punctuation">.</span><span class="token keyword">init</span> <span class="token punctuation">&#123;</span> error <span class="token keyword">in</span>
            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Custom Error: </span><span class="token interpolation-punctuation punctuation">(</span><span class="token interpolation">error</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">struct</span> <span class="token class-name">Service</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> errorHandler<span class="token punctuation">:</span> <span class="token class-name">CanHandleError</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">Service</span><span class="token punctuation">(</span>errorHandler<span class="token punctuation">:</span> <span class="token class-name">CustomizedApplicationEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span>errorHandler
    <span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">ApplicationError</span><span class="token punctuation">.</span>wrongConfiguration<span class="token punctuation">)</span></code>`,En,ls,Ka,bn,cs,Qa;return{c(){d=l("p"),_n=e("Protocol extensions are often used to simplify the creation of conforming types or to enable types to perform an action by merely adding a protocol conformance. For instance, an "),ds=l("code"),Tn=e("Alertable"),Bn=e(" protocol could provide a default implementation for "),fs=l("code"),Hn=e("showAlert(title: String, message: String?)"),xn=e(" where "),ms=l("code"),Pn=e("Self: UIViewController"),Sn=e(". This way, presenting alerts on a viewcontroller becomes easy by just adding the "),hs=l("code"),An=e("Alertable"),zn=e(" protocol to the type definition."),Is=r(),V=l("p"),Dn=e("Protocol extensions are powerful for reducing code duplication and adding functionality to types with minimal code. However, I recently encountered some behavior that seemed unusual to me."),Ms=r(),j=l("h2"),On=e("The problem"),Ws=r(),N=l("p"),In=e("What would you expect the following code to print?"),Ls=r(),H=l("pre"),Rs=r(),g=l("p"),Mn=e("My initial expectation was that it would print "),ys=l("code"),Wn=e('"CustomizedClass"'),Ln=e(". But the actual output is:"),Fs=r(),x=l("pre"),qs=r(),G=l("p"),Rn=e("While this might only seem like an interesting quirk, it can cause problems in a codebase."),Ys=r(),X=l("h2"),Fn=e("A more realistic example"),Us=r(),Z=l("p"),qn=e("Consider a scenario where you are writing a library that provides a service."),Vs=r(),P=l("pre"),js=r(),w=l("p"),Yn=e("This "),ws=l("code"),Un=e("Service"),Vn=e(" expects a type conforming to "),vs=l("code"),jn=e("CanHandleError"),Nn=e(" to handle errors occurring during its execution."),Ns=r(),S=l("pre"),Gs=r(),v=l("p"),Gn=e("You provide a default implementation for "),Es=l("code"),Xn=e("handle"),Zn=e(" to make it easier and faster for types to conform to "),bs=l("code"),Jn=e("CanHandleError"),Kn=e(". This default implementation could be sending the error to an analysis backend or raising an error alert to the user."),Xs=r(),_=l("p"),Qn=e("You might have a class that conforms to "),Cs=l("code"),$n=e("CanHandleError"),sa=e(" and provides additional functions for the consumer of your library."),Zs=r(),A=l("pre"),Js=r(),E=l("p"),na=e("This might lead the consumer of your library to believe they can override the "),gs=l("code"),aa=e("handle(_ error: Error)"),ta=e(" method when subclassing "),_s=l("code"),ea=e("DefaultApplicationEngine"),oa=e("."),Ks=r(),z=l("pre"),Qs=r(),J=l("p"),pa=e("This will cause the code in the protocol extension to be executed instead of the subclass implementation."),$s=r(),K=l("h2"),la=e("Why is this happening?"),sn=r(),Q=l("p"),ca=e("To understand why this happens, let’s revisit the introductory example."),nn=r(),D=l("pre"),an=r(),m=l("p"),ia=e("The reason is due to the way method dispatch works in Swift. Protocol extension methods are "),Ts=l("strong"),ra=e("statically dispatched"),ua=e(". This means the method implementation used is determined at compile time based on the static type of the variable ("),Bs=l("code"),ka=e("BaseType"),da=e(" in this case), not the dynamic type ("),Hs=l("code"),fa=e("CustomizedClass"),ma=e(")."),tn=r(),y=l("p"),ha=e("This behavior has been discussed multiple times already. For example in these forum posts from 2015"),O=l("a"),ya=e("[1]"),I=l("a"),wa=e("[2]"),va=e(". For more information on what protocols are capable of, read the "),M=l("a"),Ea=e("protocols section of the Swift language documentation"),ba=e(". It’s absolutely worth it."),en=r(),$=l("p"),Ca=e("In our case, we want a dynamically dispatched method call."),on=r(),ss=l("h2"),ga=e("The simple solution"),pn=r(),h=l("p"),_a=e("The simplest solution is to remove the default implementation from the protocol and force "),xs=l("code"),Ta=e("BaseClass"),Ba=e(" to implement the function itself. This way, you will also be required to use the "),Ps=l("code"),Ha=e("override"),xa=e(" keyword in the "),Ss=l("code"),Pa=e("CustomizedClass"),Sa=e("."),ln=r(),W=l("pre"),cn=r(),ns=l("p"),Aa=e("With this small change, we switch from a statically dispatched method call to a dynamically dispatched one. This also ensures that subclasses can override the function properly."),rn=r(),L=l("pre"),un=r(),as=l("p"),za=e("By forcing the conforming types to implement the function, we ensure dynamic dispatch and maintain the expected behavior."),kn=r(),ts=l("h2"),Da=e("Is there a better solution?"),dn=r(),b=l("p"),Oa=e("In my opinion, yes. By leveraging composition instead of inheritance and using structs instead of protocols, you can achieve a more flexible and maintainable design. This approach is also promoted by the brilliant minds at Point-Free. For example, in their video on "),R=l("a"),Ia=e("Protocol Witnesses"),Ma=e(" or their "),F=l("a"),Wa=e("series on designing better dependencies"),La=e("."),fn=r(),es=l("p"),Ra=e("Using composition and structs, along with my own spin on making the API similar to the one defined before, results in the following code:"),mn=r(),q=l("pre"),hn=r(),f=l("p"),Fa=e("Now, any type conforming to "),As=l("code"),qa=e("BaseType"),Ya=e(" is forced to provide a "),zs=l("code"),Ua=e("Behavior"),Va=e(". You might argue that in the original implementation, conforming types did not need to do anything, and this solution might seem worse. However, I want to point out that no matter how many functions are provided by the behavior, the "),Ds=l("code"),ja=e("BaseClass"),Na=e(" will always only have to provide a single line to define the behavior and can leverage the full power of the default implementation. Additionally, subclasses of "),Os=l("code"),Ga=e("BaseClass"),Xa=e(" don’t need to provide a custom behavior, and the behavior can still be customized further down the inheritance tree."),yn=r(),os=l("h2"),Za=e("The suggested approach applied"),wn=r(),ps=l("p"),Ja=e("I see the theory might be a bit hard to grasp, but let’s have a final look on the reworked realistic example from ealier."),vn=r(),Y=l("pre"),En=r(),ls=l("h2"),Ka=e("Conclusion"),bn=r(),cs=l("p"),Qa=e("While protocol extensions provide a powerful tool for reducing code duplication and adding functionality, they come with their own set of challenges, particularly around method dispatch. The solutions discussed here, such as removing default implementations and leveraging composition, offer ways to ensure dynamic behavior and maintainable code. However, these are just ideas that need to prove themselves in real-world applications. This behavior of protocol extensions is not new, but understanding and addressing it can save you from unexpected bugs and design pitfalls."),this.h()},l(s){d=c(s,"P",{});var t=i(d);_n=o(t,"Protocol extensions are often used to simplify the creation of conforming types or to enable types to perform an action by merely adding a protocol conformance. For instance, an "),ds=c(t,"CODE",{});var st=i(ds);Tn=o(st,"Alertable"),st.forEach(n),Bn=o(t," protocol could provide a default implementation for "),fs=c(t,"CODE",{});var nt=i(fs);Hn=o(nt,"showAlert(title: String, message: String?)"),nt.forEach(n),xn=o(t," where "),ms=c(t,"CODE",{});var at=i(ms);Pn=o(at,"Self: UIViewController"),at.forEach(n),Sn=o(t,". This way, presenting alerts on a viewcontroller becomes easy by just adding the "),hs=c(t,"CODE",{});var tt=i(hs);An=o(tt,"Alertable"),tt.forEach(n),zn=o(t," protocol to the type definition."),t.forEach(n),Is=u(s),V=c(s,"P",{});var et=i(V);Dn=o(et,"Protocol extensions are powerful for reducing code duplication and adding functionality to types with minimal code. However, I recently encountered some behavior that seemed unusual to me."),et.forEach(n),Ms=u(s),j=c(s,"H2",{});var ot=i(j);On=o(ot,"The problem"),ot.forEach(n),Ws=u(s),N=c(s,"P",{});var pt=i(N);In=o(pt,"What would you expect the following code to print?"),pt.forEach(n),Ls=u(s),H=c(s,"PRE",{class:!0});var ee=i(H);ee.forEach(n),Rs=u(s),g=c(s,"P",{});var Cn=i(g);Mn=o(Cn,"My initial expectation was that it would print "),ys=c(Cn,"CODE",{});var lt=i(ys);Wn=o(lt,'"CustomizedClass"'),lt.forEach(n),Ln=o(Cn,". But the actual output is:"),Cn.forEach(n),Fs=u(s),x=c(s,"PRE",{class:!0});var oe=i(x);oe.forEach(n),qs=u(s),G=c(s,"P",{});var ct=i(G);Rn=o(ct,"While this might only seem like an interesting quirk, it can cause problems in a codebase."),ct.forEach(n),Ys=u(s),X=c(s,"H2",{});var it=i(X);Fn=o(it,"A more realistic example"),it.forEach(n),Us=u(s),Z=c(s,"P",{});var rt=i(Z);qn=o(rt,"Consider a scenario where you are writing a library that provides a service."),rt.forEach(n),Vs=u(s),P=c(s,"PRE",{class:!0});var pe=i(P);pe.forEach(n),js=u(s),w=c(s,"P",{});var is=i(w);Yn=o(is,"This "),ws=c(is,"CODE",{});var ut=i(ws);Un=o(ut,"Service"),ut.forEach(n),Vn=o(is," expects a type conforming to "),vs=c(is,"CODE",{});var kt=i(vs);jn=o(kt,"CanHandleError"),kt.forEach(n),Nn=o(is," to handle errors occurring during its execution."),is.forEach(n),Ns=u(s),S=c(s,"PRE",{class:!0});var le=i(S);le.forEach(n),Gs=u(s),v=c(s,"P",{});var rs=i(v);Gn=o(rs,"You provide a default implementation for "),Es=c(rs,"CODE",{});var dt=i(Es);Xn=o(dt,"handle"),dt.forEach(n),Zn=o(rs," to make it easier and faster for types to conform to "),bs=c(rs,"CODE",{});var ft=i(bs);Jn=o(ft,"CanHandleError"),ft.forEach(n),Kn=o(rs,". This default implementation could be sending the error to an analysis backend or raising an error alert to the user."),rs.forEach(n),Xs=u(s),_=c(s,"P",{});var gn=i(_);Qn=o(gn,"You might have a class that conforms to "),Cs=c(gn,"CODE",{});var mt=i(Cs);$n=o(mt,"CanHandleError"),mt.forEach(n),sa=o(gn," and provides additional functions for the consumer of your library."),gn.forEach(n),Zs=u(s),A=c(s,"PRE",{class:!0});var ce=i(A);ce.forEach(n),Js=u(s),E=c(s,"P",{});var us=i(E);na=o(us,"This might lead the consumer of your library to believe they can override the "),gs=c(us,"CODE",{});var ht=i(gs);aa=o(ht,"handle(_ error: Error)"),ht.forEach(n),ta=o(us," method when subclassing "),_s=c(us,"CODE",{});var yt=i(_s);ea=o(yt,"DefaultApplicationEngine"),yt.forEach(n),oa=o(us,"."),us.forEach(n),Ks=u(s),z=c(s,"PRE",{class:!0});var ie=i(z);ie.forEach(n),Qs=u(s),J=c(s,"P",{});var wt=i(J);pa=o(wt,"This will cause the code in the protocol extension to be executed instead of the subclass implementation."),wt.forEach(n),$s=u(s),K=c(s,"H2",{});var vt=i(K);la=o(vt,"Why is this happening?"),vt.forEach(n),sn=u(s),Q=c(s,"P",{});var Et=i(Q);ca=o(Et,"To understand why this happens, let’s revisit the introductory example."),Et.forEach(n),nn=u(s),D=c(s,"PRE",{class:!0});var re=i(D);re.forEach(n),an=u(s),m=c(s,"P",{});var T=i(m);ia=o(T,"The reason is due to the way method dispatch works in Swift. Protocol extension methods are "),Ts=c(T,"STRONG",{});var bt=i(Ts);ra=o(bt,"statically dispatched"),bt.forEach(n),ua=o(T,". This means the method implementation used is determined at compile time based on the static type of the variable ("),Bs=c(T,"CODE",{});var Ct=i(Bs);ka=o(Ct,"BaseType"),Ct.forEach(n),da=o(T," in this case), not the dynamic type ("),Hs=c(T,"CODE",{});var gt=i(Hs);fa=o(gt,"CustomizedClass"),gt.forEach(n),ma=o(T,")."),T.forEach(n),tn=u(s),y=c(s,"P",{});var U=i(y);ha=o(U,"This behavior has been discussed multiple times already. For example in these forum posts from 2015"),O=c(U,"A",{href:!0,rel:!0});var _t=i(O);ya=o(_t,"[1]"),_t.forEach(n),I=c(U,"A",{href:!0,rel:!0});var Tt=i(I);wa=o(Tt,"[2]"),Tt.forEach(n),va=o(U,". For more information on what protocols are capable of, read the "),M=c(U,"A",{href:!0,rel:!0});var Bt=i(M);Ea=o(Bt,"protocols section of the Swift language documentation"),Bt.forEach(n),ba=o(U,". It’s absolutely worth it."),U.forEach(n),en=u(s),$=c(s,"P",{});var Ht=i($);Ca=o(Ht,"In our case, we want a dynamically dispatched method call."),Ht.forEach(n),on=u(s),ss=c(s,"H2",{});var xt=i(ss);ga=o(xt,"The simple solution"),xt.forEach(n),pn=u(s),h=c(s,"P",{});var B=i(h);_a=o(B,"The simplest solution is to remove the default implementation from the protocol and force "),xs=c(B,"CODE",{});var Pt=i(xs);Ta=o(Pt,"BaseClass"),Pt.forEach(n),Ba=o(B," to implement the function itself. This way, you will also be required to use the "),Ps=c(B,"CODE",{});var St=i(Ps);Ha=o(St,"override"),St.forEach(n),xa=o(B," keyword in the "),Ss=c(B,"CODE",{});var At=i(Ss);Pa=o(At,"CustomizedClass"),At.forEach(n),Sa=o(B,"."),B.forEach(n),ln=u(s),W=c(s,"PRE",{class:!0});var ue=i(W);ue.forEach(n),cn=u(s),ns=c(s,"P",{});var zt=i(ns);Aa=o(zt,"With this small change, we switch from a statically dispatched method call to a dynamically dispatched one. This also ensures that subclasses can override the function properly."),zt.forEach(n),rn=u(s),L=c(s,"PRE",{class:!0});var ke=i(L);ke.forEach(n),un=u(s),as=c(s,"P",{});var Dt=i(as);za=o(Dt,"By forcing the conforming types to implement the function, we ensure dynamic dispatch and maintain the expected behavior."),Dt.forEach(n),kn=u(s),ts=c(s,"H2",{});var Ot=i(ts);Da=o(Ot,"Is there a better solution?"),Ot.forEach(n),dn=u(s),b=c(s,"P",{});var ks=i(b);Oa=o(ks,"In my opinion, yes. By leveraging composition instead of inheritance and using structs instead of protocols, you can achieve a more flexible and maintainable design. This approach is also promoted by the brilliant minds at Point-Free. For example, in their video on "),R=c(ks,"A",{href:!0,rel:!0});var It=i(R);Ia=o(It,"Protocol Witnesses"),It.forEach(n),Ma=o(ks," or their "),F=c(ks,"A",{href:!0,rel:!0});var Mt=i(F);Wa=o(Mt,"series on designing better dependencies"),Mt.forEach(n),La=o(ks,"."),ks.forEach(n),fn=u(s),es=c(s,"P",{});var Wt=i(es);Ra=o(Wt,"Using composition and structs, along with my own spin on making the API similar to the one defined before, results in the following code:"),Wt.forEach(n),mn=u(s),q=c(s,"PRE",{class:!0});var de=i(q);de.forEach(n),hn=u(s),f=c(s,"P",{});var C=i(f);Fa=o(C,"Now, any type conforming to "),As=c(C,"CODE",{});var Lt=i(As);qa=o(Lt,"BaseType"),Lt.forEach(n),Ya=o(C," is forced to provide a "),zs=c(C,"CODE",{});var Rt=i(zs);Ua=o(Rt,"Behavior"),Rt.forEach(n),Va=o(C,". You might argue that in the original implementation, conforming types did not need to do anything, and this solution might seem worse. However, I want to point out that no matter how many functions are provided by the behavior, the "),Ds=c(C,"CODE",{});var Ft=i(Ds);ja=o(Ft,"BaseClass"),Ft.forEach(n),Na=o(C," will always only have to provide a single line to define the behavior and can leverage the full power of the default implementation. Additionally, subclasses of "),Os=c(C,"CODE",{});var qt=i(Os);Ga=o(qt,"BaseClass"),qt.forEach(n),Xa=o(C," don’t need to provide a custom behavior, and the behavior can still be customized further down the inheritance tree."),C.forEach(n),yn=u(s),os=c(s,"H2",{});var Yt=i(os);Za=o(Yt,"The suggested approach applied"),Yt.forEach(n),wn=u(s),ps=c(s,"P",{});var Ut=i(ps);Ja=o(Ut,"I see the theory might be a bit hard to grasp, but let’s have a final look on the reworked realistic example from ealier."),Ut.forEach(n),vn=u(s),Y=c(s,"PRE",{class:!0});var fe=i(Y);fe.forEach(n),En=u(s),ls=c(s,"H2",{});var Vt=i(ls);Ka=o(Vt,"Conclusion"),Vt.forEach(n),bn=u(s),cs=c(s,"P",{});var jt=i(cs);Qa=o(jt,"While protocol extensions provide a powerful tool for reducing code duplication and adding functionality, they come with their own set of challenges, particularly around method dispatch. The solutions discussed here, such as removing default implementations and leveraging composition, offer ways to ensure dynamic behavior and maintainable code. However, these are just ideas that need to prove themselves in real-world applications. This behavior of protocol extensions is not new, but understanding and addressing it can save you from unexpected bugs and design pitfalls."),jt.forEach(n),this.h()},h(){k(H,"class","language-swift"),k(x,"class","language-undefined"),k(P,"class","language-swift"),k(S,"class","language-swift"),k(A,"class","language-swift"),k(z,"class","language-swift"),k(D,"class","language-swift"),k(O,"href","https://forums.swift.org/t/proposal-universal-dynamic-dispatch-for-method-calls/237"),k(O,"rel","nofollow"),k(I,"href","https://developer.apple.com/forums/thread/11426"),k(I,"rel","nofollow"),k(M,"href","https://docs.swift.org/swift-book/documentation/the-swift-programming-language/protocols/"),k(M,"rel","nofollow"),k(W,"class","language-swift"),k(L,"class","language-swift"),k(R,"href","https://www.youtube.com/watch?v=3BVkbWXcFS4"),k(R,"rel","nofollow"),k(F,"href","https://www.pointfree.co/collections/dependencies"),k(F,"rel","nofollow"),k(q,"class","language-swift"),k(Y,"class","language-swift")},m(s,t){p(s,d,t),a(d,_n),a(d,ds),a(ds,Tn),a(d,Bn),a(d,fs),a(fs,Hn),a(d,xn),a(d,ms),a(ms,Pn),a(d,Sn),a(d,hs),a(hs,An),a(d,zn),p(s,Is,t),p(s,V,t),a(V,Dn),p(s,Ms,t),p(s,j,t),a(j,On),p(s,Ws,t),p(s,N,t),a(N,In),p(s,Ls,t),p(s,H,t),H.innerHTML=Gt,p(s,Rs,t),p(s,g,t),a(g,Mn),a(g,ys),a(ys,Wn),a(g,Ln),p(s,Fs,t),p(s,x,t),x.innerHTML=Xt,p(s,qs,t),p(s,G,t),a(G,Rn),p(s,Ys,t),p(s,X,t),a(X,Fn),p(s,Us,t),p(s,Z,t),a(Z,qn),p(s,Vs,t),p(s,P,t),P.innerHTML=Zt,p(s,js,t),p(s,w,t),a(w,Yn),a(w,ws),a(ws,Un),a(w,Vn),a(w,vs),a(vs,jn),a(w,Nn),p(s,Ns,t),p(s,S,t),S.innerHTML=Jt,p(s,Gs,t),p(s,v,t),a(v,Gn),a(v,Es),a(Es,Xn),a(v,Zn),a(v,bs),a(bs,Jn),a(v,Kn),p(s,Xs,t),p(s,_,t),a(_,Qn),a(_,Cs),a(Cs,$n),a(_,sa),p(s,Zs,t),p(s,A,t),A.innerHTML=Kt,p(s,Js,t),p(s,E,t),a(E,na),a(E,gs),a(gs,aa),a(E,ta),a(E,_s),a(_s,ea),a(E,oa),p(s,Ks,t),p(s,z,t),z.innerHTML=Qt,p(s,Qs,t),p(s,J,t),a(J,pa),p(s,$s,t),p(s,K,t),a(K,la),p(s,sn,t),p(s,Q,t),a(Q,ca),p(s,nn,t),p(s,D,t),D.innerHTML=$t,p(s,an,t),p(s,m,t),a(m,ia),a(m,Ts),a(Ts,ra),a(m,ua),a(m,Bs),a(Bs,ka),a(m,da),a(m,Hs),a(Hs,fa),a(m,ma),p(s,tn,t),p(s,y,t),a(y,ha),a(y,O),a(O,ya),a(y,I),a(I,wa),a(y,va),a(y,M),a(M,Ea),a(y,ba),p(s,en,t),p(s,$,t),a($,Ca),p(s,on,t),p(s,ss,t),a(ss,ga),p(s,pn,t),p(s,h,t),a(h,_a),a(h,xs),a(xs,Ta),a(h,Ba),a(h,Ps),a(Ps,Ha),a(h,xa),a(h,Ss),a(Ss,Pa),a(h,Sa),p(s,ln,t),p(s,W,t),W.innerHTML=se,p(s,cn,t),p(s,ns,t),a(ns,Aa),p(s,rn,t),p(s,L,t),L.innerHTML=ne,p(s,un,t),p(s,as,t),a(as,za),p(s,kn,t),p(s,ts,t),a(ts,Da),p(s,dn,t),p(s,b,t),a(b,Oa),a(b,R),a(R,Ia),a(b,Ma),a(b,F),a(F,Wa),a(b,La),p(s,fn,t),p(s,es,t),a(es,Ra),p(s,mn,t),p(s,q,t),q.innerHTML=ae,p(s,hn,t),p(s,f,t),a(f,Fa),a(f,As),a(As,qa),a(f,Ya),a(f,zs),a(zs,Ua),a(f,Va),a(f,Ds),a(Ds,ja),a(f,Na),a(f,Os),a(Os,Ga),a(f,Xa),p(s,yn,t),p(s,os,t),a(os,Za),p(s,wn,t),p(s,ps,t),a(ps,Ja),p(s,vn,t),p(s,Y,t),Y.innerHTML=te,p(s,En,t),p(s,ls,t),a(ls,Ka),p(s,bn,t),p(s,cs,t),a(cs,Qa)},p:$a,i:$a,o:$a,d(s){s&&n(d),s&&n(Is),s&&n(V),s&&n(Ms),s&&n(j),s&&n(Ws),s&&n(N),s&&n(Ls),s&&n(H),s&&n(Rs),s&&n(g),s&&n(Fs),s&&n(x),s&&n(qs),s&&n(G),s&&n(Ys),s&&n(X),s&&n(Us),s&&n(Z),s&&n(Vs),s&&n(P),s&&n(js),s&&n(w),s&&n(Ns),s&&n(S),s&&n(Gs),s&&n(v),s&&n(Xs),s&&n(_),s&&n(Zs),s&&n(A),s&&n(Js),s&&n(E),s&&n(Ks),s&&n(z),s&&n(Qs),s&&n(J),s&&n($s),s&&n(K),s&&n(sn),s&&n(Q),s&&n(nn),s&&n(D),s&&n(an),s&&n(m),s&&n(tn),s&&n(y),s&&n(en),s&&n($),s&&n(on),s&&n(ss),s&&n(pn),s&&n(h),s&&n(ln),s&&n(W),s&&n(cn),s&&n(ns),s&&n(rn),s&&n(L),s&&n(un),s&&n(as),s&&n(kn),s&&n(ts),s&&n(dn),s&&n(b),s&&n(fn),s&&n(es),s&&n(mn),s&&n(q),s&&n(hn),s&&n(f),s&&n(yn),s&&n(os),s&&n(wn),s&&n(ps),s&&n(vn),s&&n(Y),s&&n(En),s&&n(ls),s&&n(bn),s&&n(cs)}}}const Ee={title:"The Issue with Protocol Extensions",author:"Christian",date:"2024-06-23T00:00:00.000Z",layout:"blog",description:"Protocol extensions are a great way to simplify the creation of conforming types or enable types to perform actions by simply adding a protocol conformance. However, this convenience comes with its own set of drawbacks. Let's explore why protocol extensions might not always behave as expected and how to effectively resolve these issues.",published:!0};class be extends me{constructor(d){super(),he(this,d,null,we,ye,{})}}export{be as default,Ee as metadata};
